"use strict";(self.webpackChunkluban_docs=self.webpackChunkluban_docs||[]).push([[7145],{9130:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var t=i(4848),o=i(8453);const s={sidebar_position:7},r="Debugging",d={id:"workflow/debugging/index",title:"Debugging",description:"Fourier Builder includes integrated debugging features to help you identify and resolve issues within your graph. This section provides an overview of the debugging tools available in Fourier Builder.",source:"@site/docs/5-workflow/7-debugging/index.mdx",sourceDirName:"5-workflow/7-debugging",slug:"/workflow/debugging/",permalink:"/docs/workflow/debugging/",draft:!1,unlisted:!1,editUrl:"https://github.com/tiwater/luban-docs/edit/main/docs/5-workflow/7-debugging/index.mdx",tags:[],version:"current",lastUpdatedBy:"Hugh Lyu",lastUpdatedAt:1719405046e3,sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Service Interoperation",permalink:"/docs/workflow/service-interoperation/"},next:{title:"Template",permalink:"/docs/workflow/template/"}},l={},u=[{value:"Output Inspection",id:"output-inspection",level:2},{value:"Variable Inspection",id:"variable-inspection",level:2}];function a(e){const n={h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsx)(n.p,{children:"Fourier Builder includes integrated debugging features to help you identify and resolve issues within your graph. This section provides an overview of the debugging tools available in Fourier Builder."}),"\n",(0,t.jsx)(n.p,{children:'Clicking "Run" will launch the workflow in Debug mode. The Debug mode offers the following features:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Variable Inspection"}),": Inspect the values of variables at each node in the graph."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Status"}),": View the status of each node in the graph, which can be:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Running"}),": The node is currently running."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Success"}),": The node has completed successfully."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Failed"}),": The node has failed."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Output"}),": View the output of each node in the graph."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Error"}),": View the error message if a node fails."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"output-inspection",children:"Output Inspection"}),"\n",(0,t.jsx)(n.p,{children:"We provide a set of debugging nodes to visualize the output of a node. These nodes are useful for understanding and debugging the output data. The debugging nodes are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Image Previewer"}),": Displays the image output of a node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Text Previewer"}),": Displays the text output of a node."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"variable-inspection",children:"Variable Inspection"}),"\n",(0,t.jsx)(n.p,{children:"Hovering over the input and output ports of a node will display the value of the variable connected to the port. This feature helps you understand the flow of data within the graph."}),"\n",(0,t.jsx)(n.p,{children:"While workflow debugging in Fourier Builder is designed to be straightforward, we currently do not support more advanced debugging features such as breakpoints or stepping through the graph. If you have any suggestions or feedback, please let us know."})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);